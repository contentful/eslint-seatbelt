{"version":3,"sources":["/Users/thomas.kellermeier/work/tooling/eslint-seatbelt/dist/command.js","../src/command.ts"],"names":[],"mappings":"AAAA;AACA;AACE;AACA;AACA;AACA;AACA;AACA;AACF,sDAA4B;AAC5B;AACA;ACFA,yDAAsB;AAetB,IAAM,iBAAA,EAAmB,QAAA;AAEzB,SAAS,SAAA,CAAA,EAAY;AACnB,EAAA,MAAM,SAAA,EAAW,+BAAA,CAAe,eAAA,CAAgB,OAAA,CAAQ,GAA6B,CAAA;AACrF,EAAA,MAAM,UAAA,EAAY,+BAAA,CAAe,gBAAA,CAAiB,OAAA,CAAQ,GAA6B,CAAA;AACvF,EAAA,MAAM,IAAA,EAAM,EAAE,GAAG,QAAA,EAAU,GAAG,UAAU,CAAA;AACxC,EAAA,MAAM,eAAA,EAAiB,CAAC,CAAA,EAAA,GACtB,CAAA,CACG,UAAA,CAAW,GAAA,EAAK,KAAK,CAAA,CACrB,UAAA,CAAW,GAAA,EAAK,KAAK,CAAA,CACrB,UAAA,CAAW,SAAA,EAAW,CAAC,KAAA,EAAA,GAAU,CAAA,EAAA;AAC/B,EAAA;AACL,IAAA;AACO,MAAA;AACG,QAAA;AAC+B,QAAA;AACxB,QAAA;AACH,QAAA;AACZ,MAAA;AACc,MAAA;AACN,QAAA;AACC,QAAA;AACM,QAAA;AACkC,UAAA;AAC/C,QAAA;AACkB,QAAA;AACR,QAAA;AACZ,MAAA;AACW,MAAA;AACH,QAAA;AACO,QAAA;AAC+B,UAAA;AAC5C,QAAA;AACkB,QAAA;AACR,QAAA;AACA,QAAA;AACZ,MAAA;AACoB,MAAA;AACX,QAAA;AACD,QAAA;AACO,QAAA;AACwC,UAAA;AACrD,QAAA;AACkB,QAAA;AACR,QAAA;AACA,QAAA;AACZ,MAAA;AACQ,MAAA;AACA,QAAA;AACO,QAAA;AAC4B,UAAA;AACzC,QAAA;AACkB,QAAA;AACR,QAAA;AACZ,MAAA;AACS,MAAA;AACD,QAAA;AACO,QAAA;AAC6B,UAAA;AAC1C,QAAA;AACkB,QAAA;AACR,QAAA;AACZ,MAAA;AACiB,MAAA;AACT,QAAA;AACO,QAAA;AACqC,UAAA;AAClD,QAAA;AACkB,QAAA;AACR,QAAA;AACZ,MAAA;AACY,MAAA;AACJ,QAAA;AACO,QAAA;AACgC,UAAA;AAC7C,QAAA;AACkB,QAAA;AACR,QAAA;AACZ,MAAA;AACS,MAAA;AACD,QAAA;AACO,QAAA;AAC6B,UAAA;AAC1C,QAAA;AACkB,QAAA;AACR,QAAA;AACZ,MAAA;AACM,MAAA;AACE,QAAA;AACO,QAAA;AAC0B,UAAA;AACvC,QAAA;AACkB,QAAA;AACR,QAAA;AACZ,MAAA;AACS,MAAA;AACD,QAAA;AACO,QAAA;AACH,QAAA;AACH,QAAA;AACT,MAAA;AACM,MAAA;AACE,QAAA;AACO,QAAA;AACH,QAAA;AACI,QAAA;AAChB,MAAA;AACM,MAAA;AACE,QAAA;AACO,QAAA;AACH,QAAA;AACH,QAAA;AACT,MAAA;AACF,IAAA;AACA,IAAA;AACmB,MAAA;AACQ,MAAA;AAChB,MAAA;AACc,MAAA;AACrB,QAAA;AACU,UAAA;AAC0C,UAAA;AACpD,QAAA;AACF,MAAA;AACF,IAAA;AACF,EAAA;AACF;AAG0D;AAEE;AAE5C;AACe,EAAA;AAEL,EAAA;AACF,IAAA;AACpB,IAAA;AACF,EAAA;AAEwB,EAAA;AACa,IAAA;AACrC,EAAA;AAEmC,EAAA;AACrB,EAAA;AAChB;AAE6B;AACtB,EAAA;AACP","file":"/Users/thomas.kellermeier/work/tooling/eslint-seatbelt/dist/command.js","sourcesContent":[null,"#!/usr/bin/env -S pnpm exec tsx\n\nimport {\n  FallbackEnv,\n  logStderr,\n  SeatbeltConfig,\n  SeatbeltEnv,\n} from \"./SeatbeltConfig\"\nimport { parse } from \"ts-command-line-args\"\nimport { SeatbeltConfigSchema } from \"./jsonSchema/SeatbeltConfigSchema\"\nimport { name, version } from \"../package.json\"\n\nexport interface SeatbeltCliConfig extends SeatbeltConfig {\n  /** Paths are relative to this directory. Default: `process.cwd()` */\n  pwd?: string\n  /** Print the version and exit */\n  version?: boolean\n  /** Command to execute. Default: `eslint` */\n  exec?: string\n  /** Show help and exit */\n  help?: boolean\n}\n\nconst ZERO_WIDTH_SPACE = \"\\u200B\"\n\nfunction parseArgs() {\n  const fallback = SeatbeltConfig.fromFallbackEnv(process.env as unknown as FallbackEnv)\n  const overrides = SeatbeltConfig.fromEnvOverrides(process.env as unknown as SeatbeltEnv)\n  const env = { ...fallback, ...overrides }\n  const escapeForChalk = (s: string) =>\n    s\n      .replaceAll(\"{\", \"\\\\{\")\n      .replaceAll(\"}\", \"\\\\}\")\n      .replaceAll(/^(\\s)/gm, (match) => `${ZERO_WIDTH_SPACE}${match}`)\n  return parse<SeatbeltCliConfig>(\n    {\n      pwd: {\n        type: String,\n        defaultValue: env.pwd ?? process.cwd(),\n        description: `Paths are relative to this directory`,\n        optional: true,\n      },\n      seatbeltFile: {\n        type: String,\n        alias: \"f\",\n        description: escapeForChalk(\n          SeatbeltConfigSchema.properties.seatbeltFile.description,\n        ),\n        defaultValue: env.seatbeltFile,\n        optional: true,\n      },\n      keepRules: {\n        type: String,\n        description: escapeForChalk(\n          SeatbeltConfigSchema.properties.keepRules.description,\n        ),\n        defaultValue: env.keepRules,\n        multiple: true,\n        optional: true,\n      },\n      allowIncreaseRules: {\n        alias: \"r\",\n        type: String,\n        description: escapeForChalk(\n          SeatbeltConfigSchema.properties.allowIncreaseRules.description,\n        ),\n        defaultValue: env.allowIncreaseRules,\n        multiple: true,\n        optional: true,\n      },\n      frozen: {\n        type: Boolean,\n        description: escapeForChalk(\n          SeatbeltConfigSchema.properties.frozen.description,\n        ),\n        defaultValue: env.frozen,\n        optional: true,\n      },\n      disable: {\n        type: Boolean,\n        description: escapeForChalk(\n          SeatbeltConfigSchema.properties.disable.description,\n        ),\n        defaultValue: env.disable,\n        optional: true,\n      },\n      disableInEditor: {\n        type: Boolean,\n        description: escapeForChalk(\n          SeatbeltConfigSchema.properties.disableInEditor.description,\n        ),\n        defaultValue: env.disableInEditor,\n        optional: true,\n      },\n      threadsafe: {\n        type: Boolean,\n        description: escapeForChalk(\n          SeatbeltConfigSchema.properties.threadsafe.description,\n        ),\n        defaultValue: env.threadsafe,\n        optional: true,\n      },\n      verbose: {\n        type: Boolean,\n        description: escapeForChalk(\n          SeatbeltConfigSchema.properties.verbose.description,\n        ),\n        defaultValue: env.verbose,\n        optional: true,\n      },\n      root: {\n        type: String,\n        description: escapeForChalk(\n          SeatbeltConfigSchema.properties.root.description,\n        ),\n        defaultValue: env.root,\n        optional: true,\n      },\n      version: {\n        type: Boolean,\n        description: \"Print the version and exit\",\n        optional: true,\n        alias: \"v\",\n      },\n      exec: {\n        type: String,\n        description: \"Command to execute\",\n        optional: true,\n        defaultValue: \"eslint\",\n      },\n      help: {\n        type: Boolean,\n        description: \"Show help and exit\",\n        optional: true,\n        alias: \"h\",\n      },\n    },\n    {\n      processExitCode: 2,\n      showHelpWhenArgsMissing: true,\n      helpArg: \"help\",\n      headerContentSections: [\n        {\n          header: name,\n          content: `Turns command-line arguments into ${name} environment variables, then call 'eslint' or another command with them.`,\n        },\n      ],\n    },\n  )\n}\n\n// eslint-disable-next-line no-console\nconst stdout = (...args: unknown[]) => console.log(...args)\n// eslint-disable-next-line no-console\nconst stderr = (...args: unknown[]) => console.error(...args)\n\nfunction main() {\n  const argsConfig = parseArgs()\n\n  if (argsConfig.version) {\n    stdout(`v${version}`)\n    return\n  }\n\n  if (argsConfig.verbose) {\n    stderr(\"Parsed config:\", argsConfig)\n  }\n  // const args = SeatbeltArgs.fromConfig(argsConfig)\n  logStderr(\"command not implemented\")\n  process.exit(1)\n}\n\nif (require.main === module) {\n  main()\n}\n"]}